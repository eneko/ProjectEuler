
import scala.math._
import util.control.Breaks._

/**
 * Problem 12: Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 */
object Problem12 extends App
{
  override def main(args: Array[String]) {
    var index = 1L
    var sum = 1L
    var divisors = 1
    breakable {
      do {
        divisors = factors(sum).length
        if (divisors > 500) {
          println((index, sum, divisors))
          break
        }
        index += 1
        sum += index
      } while (true)
    }
  }

  def factors(number: Long) : List[Long] = {
    val factors = collection.mutable.ArrayBuffer[Long]()
    for (i <- 1L to number/2) {
      if (number%i == 0) factors.append(i)
    }
    return factors.toList ::: List(number)
  }

}
